{"version":3,"sources":["Containers/Home/Index.js","Store/Action/Index.js","Todo.js","serviceWorker.js","Store/Reducer/Index.js","Store/Index.js","index.js"],"names":["Home","user","name","email","console","log","this","props","users","onClick","set_data","Component","connect","state","dispach","data","type","Todo","updateItem","index","todos","edit","setState","title","value","obj","splice","alert","e","target","className","placeholder","onChange","add_todo","map","val","i","key","handleChange","editItem","deleteItem","deleteAll","Boolean","window","location","hostname","match","INITIAL_STATE","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d370cfd2.chunk.js","sourcesContent":["\r\nimport { Component } from 'react';\r\n// import './style.css';\r\nimport {connect} from 'react-redux';\r\nimport {set_data} from '../../Store/Action/Index'\r\nimport React from 'react';\r\n\r\nclass Home extends Component {\r\n  //  static getDerivedStateFromProps(props,state){\r\n  //   console.log(props) \r\n  //   return{\r\n\r\n  //    }\r\n  //  }\r\n    render() {\r\n   let user = {name : \"umairr\" , email:\"um@gmail.pk\"}\r\n     console.log(\"users==\",this.props.users)\r\n  return (\r\n    <div>\r\n     <h1> home</h1> \r\n     <button onClick={()=> this.props.set_data(user)}>SETDATA</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n}\r\nconst mapStateToProps=(state)=>({\r\n    users: state.users\r\n})\r\n\r\nconst mapDispachToProps=(dispach)=>({\r\n  set_data : (data) => dispach(set_data(data))\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispachToProps)(Home);\r\n\r\n","\r\n\r\nconst set_data =(data)=>{\r\n    return(dispach) =>{\r\n    \r\n         dispach ({type: \"SETDATA\", data:data})\r\n  \r\n    }\r\n \r\n }\r\n export {\r\n     set_data\r\n }\r\n ","import react,{Component} from 'react';\r\nimport React from 'react';\r\n//import reactDom from 'reactdom';\r\n//import { useState } from 'react';\r\nimport Home from \"./Containers/Home/Index\";\r\n\r\nclass Todo extends Component{\r\n    constructor(){\r\n    super();\r\n    this.state={\r\n        todos:[{title:\"ahmed\", edit:false},{title:\"ali\", edit:false}],\r\n        value:\"\",\r\n    }\r\n\r\n    }\r\n    add_todo() {\r\n        let obj = {title:this.state.value};\r\n       \r\n       this.setState({\r\n           todos : [...this.state.todos,obj],\r\n           value:\"\",\r\n       })\r\n    }\r\n\r\n    deleteItem(index){\r\n        this.state.todos.splice(index,1)\r\n        this.setState({\r\n            todos : this.state.todos,\r\n            value:\"\",\r\n        })\r\n    }\r\n    deleteAll(index){\r\n        alert('are you sure to delete?')\r\n        this.state.todos.splice(index)\r\n        this.setState({\r\n            todos : this.state.todos,\r\n            value:\"\",\r\n        })\r\n    }\r\n    editItem(index,value){\r\n        this.state.todos[index].edit=true;\r\n\r\n         \r\n    this.setState({\r\n            todos : this.state.todos,\r\n           \r\n        })\r\n\r\n\r\n    }\r\n\r\n    handleChange(e,index){\r\n        this.state.todos[index].title=e.target.value;\r\n        this.setState({\r\n            todos : this.state.todos,\r\n            \r\n        })\r\n    }\r\n    updateItem=(index)=>{\r\n\r\n         this.state.todos[index].edit=false; \r\n         this.setState({\r\n            todos : this.state.todos,\r\n            \r\n        })\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state={\r\n    //      newItem:\"\",\r\n    //      list: []  ,\r\n    //     };\r\n    // }\r\n\r\n    // updateInput (key,value){\r\n    //     this.setState({\r\n    //         [key] : value\r\n    //     });\r\n    // }\r\n    \r\n    //     addItem(){\r\n    //         const newItem={\r\n    //             //key:id,\r\n    //              id: 1+ Math.random(),\r\n    //             value: this.state.newItem.slice(),\r\n        \r\n    //         };\r\n\r\n        \r\n\r\n    //         const list = [...this.state.list];\r\n    //         list.push (newItem);\r\n\r\n    //          this.setState({\r\n    //              list,\r\n    //              newItem:\"\",\r\n    //          }); \r\n    //     }\r\n    //     deleteItem(id){\r\n    //         const list = [...this.state.list];\r\n    //         const updateList = list.filter(item => item.id !==id);\r\n    //         this.setState({this : updateList});\r\n    //     }\r\n\r\n    \r\nrender(){\r\n\r\n  \r\n    return( \r\n    <div className=\"app\">\r\n            <div>\r\n            Add an item...\r\n               <br/>\r\n               <input \r\n               type=\"text\"\r\n               placeholder=\"type item here....\"\r\n                value={this.state.value}\r\n               onChange={(e) => this.setState( {value:e.target.value}) }\r\n               />                \r\n                \r\n                <button onClick={ ()=> this.add_todo() }>\r\n                              Add Item\r\n                             \r\n                    </button>\r\n                    <br/>\r\n                    <ul>\r\n                        {this.state.todos.map((val,i) =>{\r\n                            return(\r\n                                <li key ={i}>\r\n                                { val.edit? <input value={val.title} type= \"text\" onChange={ (e)=>this.handleChange(e, i)}/> : val.title}\r\n                                {val.edit?\r\n                                <button onClick={() => this.updateItem(i)}>update</button> :\r\n                                <button onClick={() => this.editItem(i,val.title)}>\r\n                                 Edit\r\n                                </button>\r\n                                }\r\n                                <button onClick={() => this.deleteItem(i)}>\r\n                                 delete\r\n                                </button>\r\n                                </li>\r\n                                \r\n                                   \r\n                            )\r\n                        })}\r\n                    </ul>\r\n                     \r\n                                   <button onClick={() => this.deleteAll()}>\r\n                                   delete all\r\n                                  </button>\r\n                   \r\n                   \r\n                   \r\n                  \r\n                </div> \r\n                <br/>\r\n\r\n                <Home/>\r\n\r\n        </div>\r\n    )\r\n\r\n    }\r\n\r\n} \r\nexport default Todo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst INITIAL_STATE = {\r\n    users : [{\r\n        name:\"caryy\",\r\n        email:\"carry@gmail.com\"\r\n    },\r\n    {\r\n        name:\"basit\",\r\n        email:\"bas@gmail.co\"\r\n    }\r\n ],\r\n \r\n }\r\n \r\n \r\n export default (state = INITIAL_STATE,action) => {\r\n     switch (action.type){\r\n         case \"SETDATA\":\r\n             return({\r\n                 ...state,\r\n                  users:[...state.users,action.data]\r\n             })\r\n             default:\r\n                 return state;\r\n     }\r\n    \r\n }","import reducer from './Reducer/Index';\r\nimport { createStore,applyMiddleware} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nconst store = createStore(reducer ,applyMiddleware(thunk))\r\n\r\n\r\nexport default store; ","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport Todo from './Todo';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './Store/Index';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n    <Provider store={store}>\n    <Todo />\n    </Provider> \n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}